{"version":3,"file":"cli.js","sources":["../node_modules/mri/lib/index.js","../node_modules/sade/lib/utils.js","../node_modules/sade/lib/index.js","../src/cli.ts"],"sourcesContent":["function toArr(any) {\n\treturn any == null ? [] : Array.isArray(any) ? any : [any];\n}\n\nfunction toVal(out, key, val, opts) {\n\tvar x, old=out[key], nxt=(\n\t\t!!~opts.string.indexOf(key) ? (val == null || val === true ? '' : String(val))\n\t\t: typeof val === 'boolean' ? val\n\t\t: !!~opts.boolean.indexOf(key) ? (val === 'false' ? false : val === 'true' || (out._.push((x = +val,x * 0 === 0) ? x : val),!!val))\n\t\t: (x = +val,x * 0 === 0) ? x : val\n\t);\n\tout[key] = old == null ? nxt : (Array.isArray(old) ? old.concat(nxt) : [old, nxt]);\n}\n\nmodule.exports = function (args, opts) {\n\targs = args || [];\n\topts = opts || {};\n\n\tvar k, arr, arg, name, val, out={ _:[] };\n\tvar i=0, j=0, idx=0, len=args.length;\n\n\tconst alibi = opts.alias !== void 0;\n\tconst strict = opts.unknown !== void 0;\n\tconst defaults = opts.default !== void 0;\n\n\topts.alias = opts.alias || {};\n\topts.string = toArr(opts.string);\n\topts.boolean = toArr(opts.boolean);\n\n\tif (alibi) {\n\t\tfor (k in opts.alias) {\n\t\t\tarr = opts.alias[k] = toArr(opts.alias[k]);\n\t\t\tfor (i=0; i < arr.length; i++) {\n\t\t\t\t(opts.alias[arr[i]] = arr.concat(k)).splice(i, 1);\n\t\t\t}\n\t\t}\n\t}\n\n\topts.boolean.forEach(key => {\n\t\topts.boolean = opts.boolean.concat(opts.alias[key] = opts.alias[key] || []);\n\t});\n\n\topts.string.forEach(key => {\n\t\topts.string = opts.string.concat(opts.alias[key] = opts.alias[key] || []);\n\t});\n\n\tif (defaults) {\n\t\tfor (k in opts.default) {\n\t\t\topts.alias[k] = opts.alias[k] || [];\n\t\t\t(opts[typeof opts.default[k]] || []).push(k);\n\t\t}\n\t}\n\n\tconst keys = strict ? Object.keys(opts.alias) : [];\n\n\tfor (i=0; i < len; i++) {\n\t\targ = args[i];\n\n\t\tif (arg === '--') {\n\t\t\tout._ = out._.concat(args.slice(++i));\n\t\t\tbreak;\n\t\t}\n\n\t\tfor (j=0; j < arg.length; j++) {\n\t\t\tif (arg.charCodeAt(j) !== 45) break; // \"-\"\n\t\t}\n\n\t\tif (j === 0) {\n\t\t\tout._.push(arg);\n\t\t} else if (arg.substring(j, j + 3) === 'no-') {\n\t\t\tname = arg.substring(j + 3);\n\t\t\tif (strict && !~keys.indexOf(name)) {\n\t\t\t\treturn opts.unknown(arg);\n\t\t\t}\n\t\t\tout[name] = false;\n\t\t} else {\n\t\t\tfor (idx=j+1; idx < arg.length; idx++) {\n\t\t\t\tif (arg.charCodeAt(idx) === 61) break; // \"=\"\n\t\t\t}\n\n\t\t\tname = arg.substring(j, idx);\n\t\t\tval = arg.substring(++idx) || (i+1 === len || (''+args[i+1]).charCodeAt(0) === 45 || args[++i]);\n\t\t\tarr = (j === 2 ? [name] : name);\n\n\t\t\tfor (idx=0; idx < arr.length; idx++) {\n\t\t\t\tname = arr[idx];\n\t\t\t\tif (strict && !~keys.indexOf(name)) return opts.unknown('-'.repeat(j) + name);\n\t\t\t\ttoVal(out, name, (idx + 1 < arr.length) || val, opts);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (defaults) {\n\t\tfor (k in opts.default) {\n\t\t\tif (out[k] === void 0) {\n\t\t\t\tout[k] = opts.default[k];\n\t\t\t}\n\t\t}\n\t}\n\n\tif (alibi) {\n\t\tfor (k in out) {\n\t\t\tarr = opts.alias[k] || [];\n\t\t\twhile (arr.length > 0) {\n\t\t\t\tout[arr.shift()] = out[k];\n\t\t\t}\n\t\t}\n\t}\n\n\treturn out;\n}\n","const GAP = 4;\nconst __ = '  ';\nconst ALL = '__all__';\nconst DEF = '__default__';\nconst NL = '\\n';\n\nfunction format(arr) {\n\tif (!arr.length) return '';\n\tlet len = maxLen( arr.map(x => x[0]) ) + GAP;\n\tlet join = a => a[0] + ' '.repeat(len - a[0].length) + a[1] + (a[2] == null ? '' : `  (default ${a[2]})`);\n\treturn arr.map(join);\n}\n\nfunction maxLen(arr) {\n  let c=0, d=0, l=0, i=arr.length;\n  if (i) while (i--) {\n    d = arr[i].length;\n    if (d > c) {\n      l = i; c = d;\n    }\n  }\n  return arr[l].length;\n}\n\nfunction noop(s) {\n\treturn s;\n}\n\nfunction section(str, arr, fn) {\n\tif (!arr || !arr.length) return '';\n\tlet i=0, out='';\n\tout += (NL + __ + str);\n\tfor (; i < arr.length; i++) {\n\t\tout += (NL + __ + __ + fn(arr[i]));\n\t}\n\treturn out + NL;\n}\n\nexports.help = function (bin, tree, key, single) {\n\tlet out='', cmd=tree[key], pfx=`$ ${bin}`, all=tree[ALL];\n\tlet prefix = s => `${pfx} ${s}`.replace(/\\s+/g, ' ');\n\n\t// update ALL & CMD options\n\tlet tail = [['-h, --help', 'Displays this message']];\n\tif (key === DEF) tail.unshift(['-v, --version', 'Displays current version']);\n\tcmd.options = (cmd.options || []).concat(all.options, tail);\n\n\t// write options placeholder\n\tif (cmd.options.length > 0) cmd.usage += ' [options]';\n\n\t// description ~> text only; usage ~> prefixed\n\tout += section('Description', cmd.describe, noop);\n\tout += section('Usage', [cmd.usage], prefix);\n\n\tif (!single && key === DEF) {\n\t\t// General help :: print all non-internal commands & their 1st line of text\n\t\tlet cmds = Object.keys(tree).filter(k => !/__/.test(k));\n\t\tlet text = cmds.map(k => [k, (tree[k].describe || [''])[0]]);\n\t\tout += section('Available Commands', format(text), noop);\n\n\t\tout += (NL + __ + 'For more info, run any command with the `--help` flag');\n\t\tcmds.slice(0, 2).forEach(k => {\n\t\t\tout += (NL + __ + __ + `${pfx} ${k} --help`);\n\t\t});\n\t\tout += NL;\n\t}\n\n\tout += section('Options', format(cmd.options), noop);\n\tout += section('Examples', cmd.examples.map(prefix), noop);\n\n\treturn out;\n}\n\nexports.error = function (bin, str, num=1) {\n\tlet out = section('ERROR', [str], noop);\n\tout += (NL + __ + `Run \\`$ ${bin} --help\\` for more info.` + NL);\n\tconsole.error(out);\n\tprocess.exit(num);\n}\n\n// Strips leading `-|--` & extra space(s)\nexports.parse = function (str) {\n\treturn (str || '').split(/^-{1,2}|,|\\s+-{1,2}|\\s+/).filter(Boolean);\n}\n\n// @see https://stackoverflow.com/a/18914855/3577474\nexports.sentences = function (str) {\n\treturn (str || '').replace(/([.?!])\\s*(?=[A-Z])/g, '$1|').split('|');\n}\n","const mri = require('mri');\nconst $ = require('./utils');\n\nconst ALL = '__all__';\nconst DEF = '__default__';\n\nclass Sade {\n\tconstructor(name, isOne) {\n\t\tlet [bin, ...rest] = name.split(/\\s+/);\n\t\tisOne = isOne || rest.length > 0;\n\n\t\tthis.bin = bin;\n\t\tthis.ver = '0.0.0';\n\t\tthis.default = '';\n\t\tthis.tree = {};\n\t\t// set internal shapes;\n\t\tthis.command(ALL);\n\t\tthis.command([DEF].concat(isOne ? rest : '<command>').join(' '));\n\t\tthis.single = isOne;\n\t\tthis.curr = ''; // reset\n\t}\n\n\tcommand(str, desc, opts={}) {\n\t\tif (this.single) {\n\t\t\tthrow new Error('Disable \"single\" mode to add commands');\n\t\t}\n\n\t\t// All non-([|<) are commands\n\t\tlet cmd=[], usage=[], rgx=/(\\[|<)/;\n\t\tstr.split(/\\s+/).forEach(x => {\n\t\t\t(rgx.test(x.charAt(0)) ? usage : cmd).push(x);\n\t\t});\n\n\t\t// Back to string~!\n\t\tcmd = cmd.join(' ');\n\n\t\tif (cmd in this.tree) {\n\t\t\tthrow new Error(`Command already exists: ${cmd}`);\n\t\t}\n\n\t\t// re-include `cmd` for commands\n\t\tcmd.includes('__') || usage.unshift(cmd);\n\t\tusage = usage.join(' '); // to string\n\n\t\tthis.curr = cmd;\n\t\tif (opts.default) this.default=cmd;\n\n\t\tthis.tree[cmd] = { usage, options:[], alias:{}, default:{}, examples:[] };\n\t\tif (desc) this.describe(desc);\n\n\t\treturn this;\n\t}\n\n\tdescribe(str) {\n\t\tthis.tree[this.curr || DEF].describe = Array.isArray(str) ? str : $.sentences(str);\n\t\treturn this;\n\t}\n\n\toption(str, desc, val) {\n\t\tlet cmd = this.tree[ this.curr || ALL ];\n\n\t\tlet [flag, alias] = $.parse(str);\n\t\tif (alias && alias.length > 1) [flag, alias]=[alias, flag];\n\n\t\tstr = `--${flag}`;\n\t\tif (alias && alias.length > 0) {\n\t\t\tstr = `-${alias}, ${str}`;\n\t\t\tlet old = cmd.alias[alias];\n\t\t\tcmd.alias[alias] = (old || []).concat(flag);\n\t\t}\n\n\t\tlet arr = [str, desc || ''];\n\n\t\tif (val !== void 0) {\n\t\t\tarr.push(val);\n\t\t\tcmd.default[flag] = val;\n\t\t} else if (!alias) {\n\t\t\tcmd.default[flag] = void 0;\n\t\t}\n\n\t\tcmd.options.push(arr);\n\t\treturn this;\n\t}\n\n\taction(handler) {\n\t\tthis.tree[ this.curr || DEF ].handler = handler;\n\t\treturn this;\n\t}\n\n\texample(str) {\n\t\tthis.tree[ this.curr || DEF ].examples.push(str);\n\t\treturn this;\n\t}\n\n\tversion(str) {\n\t\tthis.ver = str;\n\t\treturn this;\n\t}\n\n\tparse(arr, opts={}) {\n\t\tlet offset = 2; // argv slicer\n\t\tlet alias = { h:'help', v:'version' };\n\t\tlet argv = mri(arr.slice(offset), { alias });\n\t\tlet isSingle = this.single;\n\t\tlet bin = this.bin;\n\t\tlet tmp, name = '';\n\t\tlet isVoid, cmd;\n\n\t\tif (isSingle) {\n\t\t\tcmd = this.tree[DEF];\n\t\t} else {\n\t\t\t// Loop thru possible command(s)\n\t\t\tlet i=1, len=argv._.length + 1;\n\t\t\tfor (; i < len; i++) {\n\t\t\t\ttmp = argv._.slice(0, i).join(' ');\n\t\t\t\tif (this.tree[tmp] !== void 0) {\n\t\t\t\t\tname=tmp; offset=(i + 2); // argv slicer\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tcmd = this.tree[name];\n\t\t\tisVoid = (cmd === void 0);\n\n\t\t\tif (isVoid) {\n\t\t\t\tif (this.default) {\n\t\t\t\t\tname = this.default;\n\t\t\t\t\tcmd = this.tree[name];\n\t\t\t\t\tarr.unshift(name);\n\t\t\t\t\toffset++;\n\t\t\t\t} else if (tmp) {\n\t\t\t\t\treturn $.error(bin, `Invalid command: ${tmp}`);\n\t\t\t\t} //=> else: cmd not specified, wait for now...\n\t\t\t}\n\t\t}\n\n\t\t// show main help if relied on \"default\" for multi-cmd\n\t\tif (argv.help) return this.help(!isSingle && !isVoid && name);\n\t\tif (argv.version) return this._version();\n\n\t\tif (!isSingle && cmd === void 0) {\n\t\t\treturn $.error(bin, 'No command specified.');\n\t\t}\n\n\t\tlet all = this.tree[ALL];\n\t\t// merge all objects :: params > command > all\n\t\topts.alias = Object.assign(all.alias, cmd.alias, opts.alias);\n\t\topts.default = Object.assign(all.default, cmd.default, opts.default);\n\n\t\tlet vals = mri(arr.slice(offset), opts);\n\t\tif (!valsÂ || typeof vals === 'string') {\n\t\t\treturn $.error(bin, vals || 'Parsed unknown option flag(s)!');\n\t\t}\n\n\t\tlet segs = cmd.usage.split(/\\s+/);\n\t\tlet reqs = segs.filter(x => x.charAt(0)==='<');\n\t\tlet args = vals._.splice(0, reqs.length);\n\n\t\tif (args.length < reqs.length) {\n\t\t\tif (name) bin += ` ${name}`; // for help text\n\t\t\treturn $.error(bin, 'Insufficient arguments!');\n\t\t}\n\n\t\tsegs.filter(x => x.charAt(0)==='[').forEach(_ => {\n\t\t\targs.push(vals._.shift()); // adds `undefined` per [slot] if no more\n\t\t});\n\n\t\targs.push(vals); // flags & co are last\n\t\tlet handler = cmd.handler;\n\t\treturn opts.lazy ? { args, name, handler } : handler.apply(null, args);\n\t}\n\n\thelp(str) {\n\t\tconsole.log(\n\t\t\t$.help(this.bin, this.tree, str || DEF, this.single)\n\t\t);\n\t}\n\n\t_version() {\n\t\tconsole.log(`${this.bin}, ${this.ver}`);\n\t}\n}\n\nmodule.exports = (str, isOne) => new Sade(str, isOne);\n","import * as fs from 'fs';\nimport * as path from 'path';\nimport sade from 'sade';\nimport colors from 'kleur';\nimport * as pkg from '../package.json';\nimport { elapsed, repeat, left_pad, format_milliseconds } from './utils';\nimport { InvalidEvent, ErrorEvent, FatalEvent, BuildEvent, ReadyEvent } from './interfaces';\n\nconst prog = sade('sapper').version(pkg.version);\n\nif (process.argv[2] === 'start') {\n\t// remove this in a future version\n\tconsole.error(colors.bold().red(`'sapper start' has been removed`));\n\tconsole.error(`Use 'node [build_dir]' instead`);\n\tprocess.exit(1);\n}\n\nconst start = Date.now();\n\nprog.command('dev')\n\t.describe('Start a development server')\n\t.option('-p, --port', 'Specify a port')\n\t.option('-o, --open', 'Open a browser window')\n\t.option('--dev-port', 'Specify a port for development server')\n\t.option('--hot', 'Use hot module replacement (requires webpack)', true)\n\t.option('--live', 'Reload on changes if not using --hot', true)\n\t.option('--bundler', 'Specify a bundler (rollup or webpack)')\n\t.option('--cwd', 'Current working directory', '.')\n\t.option('--src', 'Source directory', 'src')\n\t.option('--routes', 'Routes directory', 'src/routes')\n\t.option('--static', 'Static files directory', 'static')\n\t.option('--output', 'Sapper intermediate file output directory', 'src/node_modules/@sapper')\n\t.option('--build-dir', 'Development build directory', '__sapper__/dev')\n\t.option('--ext', 'Custom Route Extension', '.svelte .html')\n\t.action(async (opts: {\n\t\tport: number,\n\t\topen: boolean,\n\t\t'dev-port': number,\n\t\tlive: boolean,\n\t\thot: boolean,\n\t\tbundler?: 'rollup' | 'webpack',\n\t\tcwd: string,\n\t\tsrc: string,\n\t\troutes: string,\n\t\tstatic: string,\n\t\toutput: string,\n\t\t'build-dir': string,\n\t\text: string\n\t}) => {\n\t\tconst { dev } = await import('./api/dev');\n\n\t\ttry {\n\t\t\tconst watcher = dev({\n\t\t\t\tcwd: opts.cwd,\n\t\t\t\tsrc: opts.src,\n\t\t\t\troutes: opts.routes,\n\t\t\t\tstatic: opts.static,\n\t\t\t\toutput: opts.output,\n\t\t\t\tdest: opts['build-dir'],\n\t\t\t\tport: opts.port,\n\t\t\t\t'dev-port': opts['dev-port'],\n\t\t\t\tlive: opts.live,\n\t\t\t\thot: opts.hot,\n\t\t\t\tbundler: opts.bundler,\n\t\t\t\text: opts.ext\n\t\t\t});\n\n\t\t\tlet first = true;\n\n\t\t\twatcher.on('stdout', data => {\n\t\t\t\tprocess.stdout.write(data);\n\t\t\t});\n\n\t\t\twatcher.on('stderr', data => {\n\t\t\t\tprocess.stderr.write(data);\n\t\t\t});\n\n\t\t\twatcher.on('ready', async (event: ReadyEvent) => {\n\t\t\t\tif (first) {\n\t\t\t\t\tconsole.log(colors.bold().cyan(`> Listening on http://localhost:${event.port}`));\n\t\t\t\t\tif (opts.open) {\n\t\t\t\t\t\tconst { exec } = await import('child_process');\n\t\t\t\t\t\texec(`open http://localhost:${event.port}`);\n\t\t\t\t\t}\n\t\t\t\t\tfirst = false;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\twatcher.on('invalid', (event: InvalidEvent) => {\n\t\t\t\tconst changed = event.changed.map(filename => path.relative(process.cwd(), filename)).join(', ');\n\t\t\t\tconsole.log(`\\n${colors.bold().cyan(changed)} changed. rebuilding...`);\n\t\t\t});\n\n\t\t\twatcher.on('error', (event: ErrorEvent) => {\n\t\t\t\tconst { type, error } = event;\n\n\t\t\t\tconsole.log(colors.bold().red(`â ${type}`));\n\n\t\t\t\tif (error.loc && error.loc.file) {\n\t\t\t\t\tconsole.log(colors.bold(`${path.relative(process.cwd(), error.loc.file)} (${error.loc.line}:${error.loc.column})`));\n\t\t\t\t}\n\n\t\t\t\tconsole.log(colors.red(event.error.message));\n\t\t\t\tif (error.frame) console.log(error.frame);\n\t\t\t});\n\n\t\t\twatcher.on('fatal', (event: FatalEvent) => {\n\t\t\t\tconsole.log(colors.bold().red(`> ${event.message}`));\n\t\t\t\tif (event.log) console.log(event.log);\n\t\t\t});\n\n\t\t\twatcher.on('build', (event: BuildEvent) => {\n\t\t\t\tif (event.errors.length) {\n\t\t\t\t\tconsole.log(colors.bold().red(`â ${event.type}`));\n\n\t\t\t\t\tevent.errors.filter(e => !e.duplicate).forEach(error => {\n\t\t\t\t\t\tif (error.file) console.log(colors.bold(error.file));\n\t\t\t\t\t\tconsole.log(error.message);\n\t\t\t\t\t});\n\n\t\t\t\t\tconst hidden = event.errors.filter(e => e.duplicate).length;\n\t\t\t\t\tif (hidden > 0) {\n\t\t\t\t\t\tconsole.log(`${hidden} duplicate ${hidden === 1 ? 'error' : 'errors'} hidden\\n`);\n\t\t\t\t\t}\n\t\t\t\t} else if (event.warnings.length) {\n\t\t\t\t\tconsole.log(colors.bold().yellow(`â¢ ${event.type}`));\n\n\t\t\t\t\tevent.warnings.filter(e => !e.duplicate).forEach(warning => {\n\t\t\t\t\t\tif (warning.file) console.log(colors.bold(warning.file));\n\t\t\t\t\t\tconsole.log(warning.message);\n\t\t\t\t\t});\n\n\t\t\t\t\tconst hidden = event.warnings.filter(e => e.duplicate).length;\n\t\t\t\t\tif (hidden > 0) {\n\t\t\t\t\t\tconsole.log(`${hidden} duplicate ${hidden === 1 ? 'warning' : 'warnings'} hidden\\n`);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tconsole.log(`${colors.bold().green(`â ${event.type}`)} ${colors.gray(`(${format_milliseconds(event.duration)})`)}`);\n\t\t\t\t}\n\t\t\t});\n\t\t} catch (err) {\n\t\t\tconsole.log(colors.bold().red(`> ${err.message}`));\n\t\t\tconsole.log(colors.gray(err.stack));\n\t\t\tprocess.exit(1);\n\t\t}\n\t});\n\nprog.command('build [dest]')\n\t.describe('Create a production-ready version of your app')\n\t.option('-p, --port', 'Default of process.env.PORT', '3000')\n\t.option('--bundler', 'Specify a bundler (rollup or webpack, blank for auto)')\n\t.option('--legacy', 'Create separate legacy build')\n\t.option('--cwd', 'Current working directory', '.')\n\t.option('--src', 'Source directory', 'src')\n\t.option('--routes', 'Routes directory', 'src/routes')\n\t.option('--output', 'Sapper intermediate file output directory', 'src/node_modules/@sapper')\n\t.option('--ext', 'Custom page route extensions (space separated)', '.svelte .html')\n\t.example(`build custom-dir -p 4567`)\n\t.action(async (dest = '__sapper__/build', opts: {\n\t\tport: string,\n\t\tlegacy: boolean,\n\t\tbundler?: 'rollup' | 'webpack',\n\t\tcwd: string,\n\t\tsrc: string,\n\t\troutes: string,\n\t\toutput: string,\n\t\text: string\n\t}) => {\n\t\tconsole.log(`> Building...`);\n\n\t\ttry {\n\t\t\tawait _build(opts.bundler, opts.legacy, opts.cwd, opts.src, opts.routes, opts.output, dest, opts.ext);\n\n\t\t\tconst launcher = path.resolve(dest, 'index.js');\n\n\t\t\tfs.writeFileSync(launcher, `\n\t\t\t\t// generated by sapper build at ${new Date().toISOString()}\n\t\t\t\tprocess.env.NODE_ENV = process.env.NODE_ENV || 'production';\n\t\t\t\tprocess.env.PORT = process.env.PORT || ${opts.port || 3000};\n\n\t\t\t\tconsole.log('Starting server on port ' + process.env.PORT);\n\t\t\t\trequire('./server/server.js');\n\t\t\t`.replace(/^\\t+/gm, '').trim());\n\n\t\t\tconsole.error(`\\n> Finished in ${elapsed(start)}. Type ${colors.bold().cyan(`node ${dest}`)} to run the app.`);\n\t\t} catch (err) {\n\t\t\tconsole.log(`${colors.bold().red(`> ${err.message}`)}`);\n\t\t\tconsole.log(colors.gray(err.stack));\n\t\t\tprocess.exit(1);\n\t\t}\n\t});\n\nprog.command('export [dest]')\n\t.describe('Export your app as static files (if possible)')\n\t.option('--build', '(Re)build app before exporting', true)\n\t.option('--basepath', 'Specify a base path')\n\t.option('--host', 'Host header to use when crawling site')\n\t.option('--concurrent', 'Concurrent requests', 8)\n\t.option('--timeout', 'Milliseconds to wait for a page (--no-timeout to disable)', 5000)\n\t.option('--legacy', 'Creates an additional build, served only to legacy browsers')\n\t.option('--bundler', 'Specify a bundler (rollup or webpack, blank for auto)')\n\t.option('--cwd', 'Current working directory', '.')\n\t.option('--src', 'Source directory', 'src')\n\t.option('--routes', 'Routes directory', 'src/routes')\n\t.option('--static', 'Static files directory', 'static')\n\t.option('--output', 'Sapper intermediate file output directory', 'src/node_modules/@sapper')\n\t.option('--build-dir', 'Intermediate build directory', '__sapper__/build')\n\t.option('--ext', 'Custom page route extensions (space separated)', '.svelte .html')\n\t.option('--entry', 'Custom entry points (space separated)', '/')\n\t.action(async (dest = '__sapper__/export', opts: {\n\t\tbuild: boolean,\n\t\tlegacy: boolean,\n\t\tbundler?: 'rollup' | 'webpack',\n\t\tbasepath?: string,\n\t\thost?: string,\n\t\tconcurrent: number,\n\t\ttimeout: number | false,\n\t\tcwd: string,\n\t\tsrc: string,\n\t\troutes: string,\n\t\tstatic: string,\n\t\toutput: string,\n\t\t'build-dir': string,\n\t\text: string\n\t\tentry: string\n\t}) => {\n\t\ttry {\n\t\t\tif (opts.build) {\n\t\t\t\tconsole.log(`> Building...`);\n\t\t\t\tawait _build(opts.bundler, opts.legacy, opts.cwd, opts.src, opts.routes, opts.output, opts['build-dir'], opts.ext);\n\t\t\t\tconsole.error(`\\n> Built in ${elapsed(start)}`);\n\t\t\t}\n\n\t\t\tconst { export: _export } = await import('./api/export');\n\t\t\tconst { default: pb } = await import('pretty-bytes');\n\n\t\t\tawait _export({\n\t\t\t\tcwd: opts.cwd,\n\t\t\t\tstatic: opts.static,\n\t\t\t\tbuild_dir: opts['build-dir'],\n\t\t\t\texport_dir: dest,\n\t\t\t\tbasepath: opts.basepath,\n\t\t\t\thost_header: opts.host,\n\t\t\t\ttimeout: opts.timeout,\n\t\t\t\tconcurrent: opts.concurrent,\n\t\t\t\tentry: opts.entry,\n\n\t\t\t\toninfo: event => {\n\t\t\t\t\tconsole.log(colors.bold().cyan(`> ${event.message}`));\n\t\t\t\t},\n\n\t\t\t\tonfile: event => {\n\t\t\t\t\tconst size_color = event.size > 150000 ? colors.bold().red : event.size > 50000 ? colors.bold().yellow : colors.bold().gray;\n\t\t\t\t\t\tconst size_label = size_color(left_pad(pb(event.size), 10));\n\n\t\t\t\t\t\tconst file_label = event.status === 200\n\t\t\t\t\t\t\t? event.file\n\t\t\t\t\t\t\t: colors.bold()[event.status >= 400 ? 'red' : 'yellow'](`(${event.status}) ${event.file}`);\n\n\t\t\t\t\t\tconsole.log(`${size_label}   ${file_label}`);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tconsole.error(`\\n> Finished in ${elapsed(start)}. Type ${colors.bold().cyan(`npx serve ${dest}`)} to run the app.`);\n\t\t} catch (err) {\n\t\t\tconsole.error(colors.bold().red(`> ${err.message}`));\n\t\t\tprocess.exit(1);\n\t\t}\n\t});\n\nprog.parse(process.argv, { unknown: (arg: string) => `Unknown option: ${arg}` });\n\n\nasync function _build(\n\tbundler: 'rollup' | 'webpack',\n\tlegacy: boolean,\n\tcwd: string,\n\tsrc: string,\n\troutes: string,\n\toutput: string,\n\tdest: string,\n\text: string\n) {\n\tconst { build } = await import('./api/build');\n\n\tawait build({\n\t\tbundler,\n\t\tlegacy,\n\t\tcwd,\n\t\tsrc,\n\t\troutes,\n\t\tdest,\n\t\text,\n\t\toutput,\n\t\toncompile: event => {\n\t\t\tlet banner = `built ${event.type}`;\n\t\t\tlet c = (txt: string) => colors.cyan(txt);\n\n\t\t\tconst { warnings } = event.result;\n\t\t\tif (warnings.length > 0) {\n\t\t\t\tbanner += ` with ${warnings.length} ${warnings.length === 1 ? 'warning' : 'warnings'}`;\n\t\t\t\tc = (txt: string) => colors.cyan(txt);\n\t\t\t}\n\n\t\t\tconsole.log();\n\t\t\tconsole.log(c(`ââ${repeat('â', banner.length)}ââ`));\n\t\t\tconsole.log(c(`â ${colors.bold(banner)       } â`));\n\t\t\tconsole.log(c(`ââ${repeat('â', banner.length)}ââ`));\n\n\t\t\tconsole.log(event.result.print());\n\t\t}\n\t});\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AAIA;;;;;;;;;;AAUA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACdA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;AAOA;;;;;;;;;;;AAWA;;;;AAIA;;;;;;;;;;AAUA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmCA;;;;;;;;AAQA;;;;;AAKA;;;;;;;;;;;ACnFA;AACA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAg}