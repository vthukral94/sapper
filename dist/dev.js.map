{"version":3,"file":"dev.js","sources":["../src/api/dev.ts"],"sourcesContent":["import * as path from 'path';\nimport * as fs from 'fs';\nimport * as http from 'http';\nimport * as child_process from 'child_process';\nimport * as ports from 'port-authority';\nimport { EventEmitter } from 'events';\nimport { create_manifest_data, create_app, create_compilers, create_serviceworker_manifest } from '../core';\nimport { Compiler, Compilers } from '../core/create_compilers';\nimport { CompileResult } from '../core/create_compilers/interfaces';\nimport Deferred from './utils/Deferred';\nimport validate_bundler from './utils/validate_bundler';\nimport { copy_shimport } from './utils/copy_shimport';\nimport { ManifestData, FatalEvent, ErrorEvent, ReadyEvent, InvalidEvent } from '../interfaces';\nimport read_template from '../core/read_template';\nimport { noop } from './utils/noop';\nimport { copy_runtime } from './utils/copy_runtime';\nimport { rimraf, mkdirp } from './utils/fs_utils';\n\ntype Opts = {\n\tcwd?: string,\n\tsrc?: string,\n\tdest?: string,\n\troutes?: string,\n\toutput?: string,\n\tstatic?: string,\n\t'dev-port'?: number,\n\tlive?: boolean,\n\thot?: boolean,\n\t'devtools-port'?: number,\n\tbundler?: 'rollup' | 'webpack',\n\tport?: number,\n\text: string\n};\n\nexport function dev(opts: Opts) {\n\treturn new Watcher(opts);\n}\n\nclass Watcher extends EventEmitter {\n\tbundler: 'rollup' | 'webpack';\n\tdirs: {\n\t\tcwd: string;\n\t\tsrc: string;\n\t\tdest: string;\n\t\troutes: string;\n\t\toutput: string;\n\t\tstatic: string;\n\t}\n\tport: number;\n\tclosed: boolean;\n\n\tdev_port: number;\n\tlive: boolean;\n\thot: boolean;\n\n\tdevtools_port: number;\n\n\tdev_server: DevServer;\n\tproc: child_process.ChildProcess;\n\tfilewatchers: Array<{ close: () => void }>;\n\tdeferred: Deferred;\n\n\tcrashed: boolean;\n\trestarting: boolean;\n\tcurrent_build: {\n\t\tchanged: Set<string>;\n\t\trebuilding: Set<string>;\n\t\tunique_warnings: Set<string>;\n\t\tunique_errors: Set<string>;\n\t}\n\text: string;\n\n\tconstructor({\n\t\tcwd = '.',\n\t\tsrc = 'src',\n\t\troutes = 'src/routes',\n\t\toutput = 'src/node_modules/@sapper',\n\t\tstatic: static_files = 'static',\n\t\tdest = '__sapper__/dev',\n\t\t'dev-port': dev_port,\n\t\tlive,\n\t\thot,\n\t\t'devtools-port': devtools_port,\n\t\tbundler,\n\t\tport = +process.env.PORT,\n\t\text\n\t}: Opts) {\n\t\tsuper();\n\n\t\tcwd = path.resolve(cwd);\n\n\t\tthis.bundler = validate_bundler(bundler);\n\t\tthis.dirs = {\n\t\t\tcwd,\n\t\t\tsrc: path.resolve(cwd, src),\n\t\t\tdest: path.resolve(cwd, dest),\n\t\t\troutes: path.resolve(cwd, routes),\n\t\t\toutput: path.resolve(cwd, output),\n\t\t\tstatic: path.resolve(cwd, static_files)\n\t\t};\n\t\tthis.ext = ext;\n\t\tthis.port = port;\n\t\tthis.closed = false;\n\n\t\tthis.dev_port = dev_port;\n\t\tthis.live = live;\n\t\tthis.hot = hot;\n\n\t\tthis.devtools_port = devtools_port;\n\n\t\tthis.filewatchers = [];\n\n\t\tthis.current_build = {\n\t\t\tchanged: new Set(),\n\t\t\trebuilding: new Set(),\n\t\t\tunique_errors: new Set(),\n\t\t\tunique_warnings: new Set()\n\t\t};\n\n\t\t// remove this in a future version\n\t\tconst template = read_template(src);\n\t\tif (template.indexOf('%sapper.base%') === -1) {\n\t\t\tconst error = new Error(`As of Sapper v0.10, your template.html file must include %sapper.base% in the <head>`);\n\t\t\terror.code = `missing-sapper-base`;\n\t\t\tthrow error;\n\t\t}\n\n\t\tprocess.env.NODE_ENV = 'development';\n\n\t\tprocess.on('exit', () => {\n\t\t\tthis.close();\n\t\t});\n\n\t\tthis.init();\n\t}\n\n\tasync init() {\n\t\tif (this.port) {\n\t\t\tif (!await ports.check(this.port)) {\n\t\t\t\tthis.emit('fatal', <FatalEvent>{\n\t\t\t\t\tmessage: `Port ${this.port} is unavailable`\n\t\t\t\t});\n\t\t\t\treturn;\n\t\t\t}\n\t\t} else {\n\t\t\tthis.port = await ports.find(3000);\n\t\t}\n\n\t\tconst { cwd, src, dest, routes, output, static: static_files } = this.dirs;\n\n\t\trimraf(output);\n\t\tmkdirp(output);\n\t\tcopy_runtime(output);\n\n\t\trimraf(dest);\n\t\tmkdirp(`${dest}/client`);\n\t\tif (this.bundler === 'rollup') copy_shimport(dest);\n\n\t\tif (!this.dev_port) this.dev_port = await ports.find(10000);\n\n\t\t// Chrome looks for debugging targets on ports 9222 and 9229 by default\n\t\tif (!this.devtools_port) this.devtools_port = await ports.find(9222);\n\n\t\tlet manifest_data: ManifestData;\n\n\t\ttry {\n\t\t\tmanifest_data = create_manifest_data(routes, this.ext);\n\t\t\tcreate_app({\n\t\t\t\tbundler: this.bundler,\n\t\t\t\tmanifest_data,\n\t\t\t\tdev: true,\n\t\t\t\tdev_port: this.dev_port,\n\t\t\t\tcwd, src, dest, routes, output\n\t\t\t});\n\t\t} catch (err) {\n\t\t\tthis.emit('fatal', <FatalEvent>{\n\t\t\t\tmessage: err.message\n\t\t\t});\n\t\t\treturn;\n\t\t}\n\n\t\tthis.dev_server = new DevServer(this.dev_port);\n\n\t\tthis.filewatchers.push(\n\t\t\twatch_dir(\n\t\t\t\troutes,\n\t\t\t\t({ path: file, stats }) => {\n\t\t\t\t\tif (stats.isDirectory()) {\n\t\t\t\t\t\treturn path.basename(file)[0] !== '_';\n\t\t\t\t\t}\n\t\t\t\t\treturn true;\n\t\t\t\t},\n\t\t\t\t() => {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tmanifest_data = create_manifest_data(routes, this.ext);\n\t\t\t\t\t\tcreate_app({\n\t\t\t\t\t\t\tbundler: this.bundler,\n\t\t\t\t\t\t\tmanifest_data,\n\t\t\t\t\t\t\tdev: true,\n\t\t\t\t\t\t\tdev_port: this.dev_port,\n\t\t\t\t\t\t\tcwd, src, dest, routes, output\n\t\t\t\t\t\t});\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\tthis.emit('error', <ErrorEvent>{\n\t\t\t\t\t\t\ttype: 'manifest',\n\t\t\t\t\t\t\terror\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t)\n\t\t);\n\n\t\tif (this.live) {\n\t\t\tthis.filewatchers.push(\n\t\t\t\tfs.watch(`${src}/template.html`, () => {\n\t\t\t\t\tthis.dev_server.send({\n\t\t\t\t\t\taction: 'reload'\n\t\t\t\t\t});\n\t\t\t\t})\n\t\t\t);\n\t\t}\n\n\t\tlet deferred = new Deferred();\n\n\t\t// TODO watch the configs themselves?\n\t\tconst compilers: Compilers = await create_compilers(this.bundler, cwd, src, dest, true);\n\n\t\tconst emitFatal = () => {\n\t\t\tthis.emit('fatal', <FatalEvent>{\n\t\t\t\tmessage: `Server crashed`\n\t\t\t});\n\n\t\t\tthis.crashed = true;\n\t\t\tthis.proc = null;\n\t\t};\n\n\t\tthis.watch(compilers.server, {\n\t\t\tname: 'server',\n\n\t\t\tinvalid: filename => {\n\t\t\t\tthis.restart(filename, 'server');\n\t\t\t},\n\n\t\t\thandle_result: (result: CompileResult) => {\n\t\t\t\tdeferred.promise.then(() => {\n\t\t\t\t\tconst restart = () => {\n\t\t\t\t\t\tthis.crashed = false;\n\n\t\t\t\t\t\treturn ports.wait(this.port)\n\t\t\t\t\t\t\t.then((() => {\n\t\t\t\t\t\t\t\tthis.emit('ready', <ReadyEvent>{\n\t\t\t\t\t\t\t\t\tport: this.port,\n\t\t\t\t\t\t\t\t\tprocess: this.proc\n\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\tif (this.hot && this.bundler === 'webpack') {\n\t\t\t\t\t\t\t\t\tthis.dev_server.send({\n\t\t\t\t\t\t\t\t\t\tstatus: 'completed'\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t} else if (this.live) {\n\t\t\t\t\t\t\t\t\tthis.dev_server.send({\n\t\t\t\t\t\t\t\t\t\taction: 'reload'\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}))\n\t\t\t\t\t\t\t.catch(err => {\n\t\t\t\t\t\t\t\tif (this.crashed) return;\n\n\t\t\t\t\t\t\t\tthis.emit('fatal', <FatalEvent>{\n\t\t\t\t\t\t\t\t\tmessage: `Server is not listening on port ${this.port}`\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t});\n\t\t\t\t\t};\n\n\t\t\t\t\tconst start_server = () => {\n\t\t\t\t\t\t// we need to give the child process its own DevTools port,\n\t\t\t\t\t\t// otherwise Node will try to use the parent's (and fail)\n\t\t\t\t\t\tconst debugArgRegex = /--inspect(?:-brk|-port)?|--debug-port/;\n\t\t\t\t\t\tconst execArgv = process.execArgv.slice();\n\t\t\t\t\t\tif (execArgv.some((arg: string) => !!arg.match(debugArgRegex))) {\n\t\t\t\t\t\t\texecArgv.push(`--inspect-port=${this.devtools_port}`);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tthis.proc = child_process.fork(`${dest}/server/server.js`, [], {\n\t\t\t\t\t\t\tcwd: process.cwd(),\n\t\t\t\t\t\t\tenv: Object.assign({\n\t\t\t\t\t\t\t\tPORT: this.port\n\t\t\t\t\t\t\t}, process.env),\n\t\t\t\t\t\t\tstdio: ['ipc'],\n\t\t\t\t\t\t\texecArgv\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tthis.proc.stdout.on('data', chunk => {\n\t\t\t\t\t\t\tthis.emit('stdout', chunk);\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tthis.proc.stderr.on('data', chunk => {\n\t\t\t\t\t\t\tthis.emit('stderr', chunk);\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tthis.proc.on('message', message => {\n\t\t\t\t\t\t\tif (message.__sapper__ && message.event === 'basepath') {\n\t\t\t\t\t\t\t\tthis.emit('basepath', {\n\t\t\t\t\t\t\t\t\tbasepath: message.basepath\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tthis.proc.on('exit', emitFatal);\n\t\t\t\t\t};\n\n\t\t\t\t\tif (this.proc) {\n\t\t\t\t\t\tif (this.restarting) return;\n\t\t\t\t\t\tthis.restarting = true;\n\t\t\t\t\t\tthis.proc.removeListener('exit', emitFatal);\n\t\t\t\t\t\tthis.proc.kill();\n\t\t\t\t\t\tthis.proc.on('exit', async () => {\n\t\t\t\t\t\t\tstart_server();\n\t\t\t\t\t\t\tawait restart();\n\t\t\t\t\t\t\tthis.restarting = false;\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tstart_server();\n\t\t\t\t\t\trestart();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\n\t\tthis.watch(compilers.client, {\n\t\t\tname: 'client',\n\n\t\t\tinvalid: filename => {\n\t\t\t\tthis.restart(filename, 'client');\n\t\t\t\tdeferred = new Deferred();\n\n\t\t\t\t// TODO we should delete old assets. due to a webpack bug\n\t\t\t\t// i don't even begin to comprehend, this is apparently\n\t\t\t\t// quite difficult\n\t\t\t},\n\n\t\t\thandle_result: (result: CompileResult) => {\n\t\t\t\tfs.writeFileSync(\n\t\t\t\t\tpath.join(dest, 'build.json'),\n\n\t\t\t\t\t// TODO should be more explicit that to_json has effects\n\t\t\t\t\tJSON.stringify(result.to_json(manifest_data, this.dirs), null, '  ')\n\t\t\t\t);\n\n\t\t\t\tconst client_files = result.chunks.map(chunk => `client/${chunk.file}`);\n\n\t\t\t\tcreate_serviceworker_manifest({\n\t\t\t\t\tmanifest_data,\n\t\t\t\t\toutput,\n\t\t\t\t\tclient_files,\n\t\t\t\t\tstatic_files\n\t\t\t\t});\n\n\t\t\t\tdeferred.fulfil();\n\n\t\t\t\t// we need to wait a beat before watching the service\n\t\t\t\t// worker, because of some webpack nonsense\n\t\t\t\tsetTimeout(watch_serviceworker, 100);\n\t\t\t}\n\t\t});\n\n\t\tlet watch_serviceworker = compilers.serviceworker\n\t\t\t? () => {\n\t\t\t\twatch_serviceworker = noop;\n\n\t\t\t\tthis.watch(compilers.serviceworker, {\n\t\t\t\t\tname: 'service worker'\n\t\t\t\t});\n\t\t\t}\n\t\t\t: noop;\n\t}\n\n\tclose() {\n\t\tif (this.closed) return;\n\t\tthis.closed = true;\n\n\t\tif (this.dev_server) this.dev_server.close();\n\n\t\tif (this.proc) this.proc.kill();\n\t\tthis.filewatchers.forEach(watcher => {\n\t\t\twatcher.close();\n\t\t});\n\t}\n\n\trestart(filename: string, type: string) {\n\t\tif (this.restarting) {\n\t\t\tthis.current_build.changed.add(filename);\n\t\t\tthis.current_build.rebuilding.add(type);\n\t\t} else {\n\t\t\tthis.restarting = true;\n\n\t\t\tthis.current_build = {\n\t\t\t\tchanged: new Set([filename]),\n\t\t\t\trebuilding: new Set([type]),\n\t\t\t\tunique_warnings: new Set(),\n\t\t\t\tunique_errors: new Set()\n\t\t\t};\n\n\t\t\tprocess.nextTick(() => {\n\t\t\t\tthis.emit('invalid', <InvalidEvent>{\n\t\t\t\t\tchanged: Array.from(this.current_build.changed),\n\t\t\t\t\tinvalid: {\n\t\t\t\t\t\tserver: this.current_build.rebuilding.has('server'),\n\t\t\t\t\t\tclient: this.current_build.rebuilding.has('client'),\n\t\t\t\t\t\tserviceworker: this.current_build.rebuilding.has('serviceworker'),\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tthis.restarting = false;\n\t\t\t});\n\t\t}\n\t}\n\n\twatch(compiler: Compiler, { name, invalid = noop, handle_result = noop }: {\n\t\tname: string,\n\t\tinvalid?: (filename: string) => void;\n\t\thandle_result?: (result: CompileResult) => void;\n\t}) {\n\t\tcompiler.oninvalid(invalid);\n\n\t\tcompiler.watch((error?: Error, result?: CompileResult) => {\n\t\t\tif (error) {\n\t\t\t\tthis.emit('error', <ErrorEvent>{\n\t\t\t\t\ttype: name,\n\t\t\t\t\terror\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tthis.emit('build', {\n\t\t\t\t\ttype: name,\n\n\t\t\t\t\tduration: result.duration,\n\t\t\t\t\terrors: result.errors,\n\t\t\t\t\twarnings: result.warnings\n\t\t\t\t});\n\n\t\t\t\thandle_result(result);\n\t\t\t}\n\t\t});\n\t}\n}\n\nconst INTERVAL = 10000;\n\nclass DevServer {\n\tclients: Set<http.ServerResponse>;\n\tinterval: NodeJS.Timer;\n\t_: http.Server;\n\n\tconstructor(port: number, interval = 10000) {\n\t\tthis.clients = new Set();\n\n\t\tthis._ = http.createServer((req, res) => {\n\t\t\tif (req.url !== '/__sapper__') return;\n\n\t\t\treq.socket.setKeepAlive(true);\n\t\t\tres.writeHead(200, {\n\t\t\t\t'Access-Control-Allow-Origin': '*',\n\t\t\t\t'Access-Control-Allow-Headers': 'Cache-Control',\n\t\t\t\t'Content-Type': 'text/event-stream;charset=utf-8',\n\t\t\t\t'Cache-Control': 'no-cache, no-transform',\n\t\t\t\t'Connection': 'keep-alive',\n\t\t\t\t// While behind nginx, event stream should not be buffered:\n\t\t\t\t// http://nginx.org/docs/http/ngx_http_proxy_module.html#proxy_buffering\n\t\t\t\t'X-Accel-Buffering': 'no'\n\t\t\t});\n\n\t\t\tres.write('\\n');\n\n\t\t\tthis.clients.add(res);\n\t\t\treq.on('close', () => {\n\t\t\t\tthis.clients.delete(res);\n\t\t\t});\n\t\t});\n\n\t\tthis._.listen(port);\n\n\t\tthis.interval = setInterval(() => {\n\t\t\tthis.send(null);\n\t\t}, INTERVAL);\n\t}\n\n\tclose() {\n\t\tthis._.close();\n\t\tclearInterval(this.interval);\n\t}\n\n\tsend(data: any) {\n\t\tthis.clients.forEach(client => {\n\t\t\tclient.write(`data: ${JSON.stringify(data)}\\n\\n`);\n\t\t});\n\t}\n}\n\nfunction watch_dir(\n\tdir: string,\n\tfilter: ({ path, stats }: { path: string, stats: fs.Stats }) => boolean,\n\tcallback: () => void\n) {\n\tlet watch: any;\n\tlet closed = false;\n\n\timport('cheap-watch').then(({ default: CheapWatch }) => {\n\t\tif (closed) return;\n\n\t\twatch = new CheapWatch({ dir, filter, debounce: 50 });\n\n\t\twatch.on('+', callback);\n\n\t\twatch.on('-', callback);\n\n\t\twatch.init();\n\t});\n\n\treturn {\n\t\tclose: () => {\n\t\t\tif (watch) watch.close();\n\t\t\tclosed = true;\n\t\t}\n\t};\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAmCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,i}