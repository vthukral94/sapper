{"version":3,"file":"fs_utils.js","sources":["../src/api/utils/fs_utils.ts"],"sourcesContent":["import * as fs from 'fs';\nimport * as path from 'path';\n\nexport function mkdirp(dir: string) {\n\tconst parent = path.dirname(dir);\n\tif (parent === dir) return;\n\n\tmkdirp(parent);\n\n\ttry {\n\t\tfs.mkdirSync(dir);\n\t} catch (err) {\n\t\t// ignore\n\t}\n}\n\nexport function rimraf(thing: string) {\n\tif (!fs.existsSync(thing)) return;\n\n\tconst stats = fs.statSync(thing);\n\n\tif (stats.isDirectory()) {\n\t\tfs.readdirSync(thing).forEach(file => {\n\t\t\trimraf(path.join(thing, file));\n\t\t});\n\n\t\tfs.rmdirSync(thing);\n\t} else {\n\t\tfs.unlinkSync(thing);\n\t}\n}\n\nexport function copy(from: string, to: string) {\n\tif (!fs.existsSync(from)) return;\n\n\tconst stats = fs.statSync(from);\n\n\tif (stats.isDirectory()) {\n\t\tfs.readdirSync(from).forEach(file => {\n\t\t\tcopy(path.join(from, file), path.join(to, file));\n\t\t});\n\t} else {\n\t\tmkdirp(path.dirname(to));\n\t\tfs.writeFileSync(to, fs.readFileSync(from));\n\t\tfs.utimesSync(to, stats.atime, stats.mtime);\n\t}\n}"],"names":[],"mappings":";;;;;;;;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;"}